name: run-bot

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run bot script
        env:
          DTOKEN: ${{ secrets.DTOKEN }}
          GTOKEN: ${{ secrets.GTOKEN }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_CLIENT_ID: ${{ secrets.TWITTER_CLIENT_ID }}
          TWITTER_CLIENT_SECRET: ${{ secrets.TWITTER_CLIENT_SECRET }}
        run: python bot.py

      - name: Log bot execution
        run: |
          python -c "
import json, os
from datetime import datetime

LOG_FILE = 'logs.json'
MAX_LOG_ENTRIES = 5

def log_bot_run(details):
    logs = {}

    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'r') as file:
            logs = json.load(file)

    if 'bot_logs' not in logs:
        logs['bot_logs'] = []

    logs['bot_logs'].append(details)

    if len(logs['bot_logs']) > MAX_LOG_ENTRIES:
        logs['bot_logs'] = logs['bot_logs'][-MAX_LOG_ENTRIES:]

    with open(LOG_FILE, 'w') as file:
        json.dump(logs, file, indent=4)

log_details = {
    'timestamp': datetime.now().isoformat(),
    'event': 'Bot execution',
    'success': True,
    'details': {'info': 'Bot ran successfully'}
}
log_bot_run(log_details)
"
